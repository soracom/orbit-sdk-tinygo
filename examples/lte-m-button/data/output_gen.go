// Code generated by "json-ice --type=Output"; DO NOT EDIT.

package data

import "github.com/moznion/go-json-ice/serializer"

func MarshalOutputAsJSON(s *Output) ([]byte, error) {
	buff := make([]byte, 1, 210)
	buff[0] = '{'
	buff = append(buff, "\"clickType\":"...)
	buff = serializer.AppendSerializedInt(buff, int64(s.ClickType))
	buff = append(buff, ',')
	buff = append(buff, "\"clickTypeName\":"...)
	buff = serializer.AppendSerializedString(buff, s.ClickTypeName)
	buff = append(buff, ',')
	buff = append(buff, "\"batteryLevel\":"...)
	buff = serializer.AppendSerializedFloat(buff, float64(s.BatteryLevel))
	buff = append(buff, ',')
	buff = append(buff, "\"binaryParserEnabled\":"...)
	buff = serializer.AppendSerializedBool(buff, s.BinaryParserEnabled)
	buff = append(buff, ',')
	buff = append(buff, "\"imsi\":"...)
	buff = serializer.AppendSerializedString(buff, s.Imsi)
	buff = append(buff, ',')
	buff = append(buff, "\"name\":"...)
	buff = serializer.AppendSerializedString(buff, s.Name)
	buff = append(buff, ',')
	if s.Location == nil {
		buff = append(buff, "\"location\":null,"...)
	} else {
		buff = append(buff, "\"location\":"...)
		if marshaled, err := s.Location.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buff = append(buff, marshaled...)
		}

		buff = append(buff, ',')
	}
	buff = append(buff, "\"timestamp\":"...)
	buff = serializer.AppendSerializedInt(buff, int64(s.Timestamp))
	buff = append(buff, ',')
	if buff[len(buff)-1] == ',' {
		buff[len(buff)-1] = '}'
	} else {
		buff = append(buff, '}')
	}
	return buff, nil
}
